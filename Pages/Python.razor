@page "/python"
@inject IJSRuntime JSRuntime

<h3>Code that was used to create the model</h3>

<pre><code class="language-python">@expython</code></pre>


@code {
	private string expython = @"
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense
from sklearn.metrics import mean_squared_error
from math import sqrt
from sklearn.metrics import r2_score
import yfinance as yf
from matplotlib.dates import DateFormatter

# Fetch historical stock data for Apple
ticker = ""AAPL""
start_date = ""2015-01-01""
end_date = ""2023-12-12""
apple_data = yf.download(ticker, start=start_date, end=end_date)
apple_data.index = pd.to_datetime(apple_data.index)
# Use adjusted closing prices
prices = apple_data['Adj Close'].values.reshape(-1, 1)

# Normalize data
scaler = MinMaxScaler(feature_range=(0, 1))
prices_normalized = scaler.fit_transform(prices)

# Function to create input sequences and labels for training
def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i+seq_length])
        y.append(data[i+seq_length])
    return np.array(X), np.array(y)

# Define hyperparameters
sequence_length = 10  
epochs = 50
batch_size = 64

# Create input sequences and labels
X, y = create_sequences(prices_normalized, sequence_length)

# Split data into training and testing sets
train_size = int(len(X) * 0.80)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Build the GRU model
model = Sequential()
model.add(GRU(50, input_shape=(sequence_length, 1))) # for LSTM model.add(LSTM(50, input_shape=(sequence_length, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=2)

# Make predictions on the test set
predictions = model.predict(X_test)

# Inverse transform the predictions to get original stock prices
predictions = scaler.inverse_transform(predictions)
y_test = scaler.inverse_transform(y_test)

# Evaluate the model
rmse = sqrt(mean_squared_error(y_test, predictions))
r_squared = r2_score(y_test, predictions)

print($""Root Mean Squared Error (RMSE): {rmse}"")
print($""R-squared: {r_squared}"")

# Plot the results with dates on the x-axis
	date_index = apple_data.index[train_size + sequence_length:]

	plt.figure(figsize= (12, 6))
plt.plot(date_index, y_test, label='True Prices')
plt.plot(date_index, predictions, label='Predicted Prices')
plt.title('Apple Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()

# Format x-axis as dates
plt.gca().xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))


actual_prices = y_test.flatten()

data = { 'Date': date_index, 'Actual Prices': actual_prices, 'Predicted Prices': predictions.flatten() }
df = pd.DataFrame(data)

# Save the data to a CSV file
df.to_csv('stock_prediction_data.csv', index= False)

plt.show()";


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("highlightAll");
		}
	}
}